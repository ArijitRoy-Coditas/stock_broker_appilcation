// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/signin": {
            "post": {
                "description": "Authenticates a user and returns access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign in a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BFFSinginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessAPIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorAPIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorAPIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorAPIResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/signup": {
            "post": {
                "description": "Handles user registration by validating input and storing user details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User Registration Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BFFCreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input payload",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorAPIResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorAPIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorAPIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BFFCreateUserRequest": {
            "type": "object",
            "required": [
                "confirmPassword",
                "email",
                "panCard",
                "password",
                "phoneNumber",
                "username"
            ],
            "properties": {
                "confirmPassword": {
                    "type": "string",
                    "minLength": 8,
                    "example": "Secure@123"
                },
                "email": {
                    "type": "string",
                    "example": "arijit@gmail.com"
                },
                "panCard": {
                    "type": "string",
                    "example": "EQZRP1234P"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "Secure@123"
                },
                "phoneNumber": {
                    "type": "integer",
                    "maximum": 9999999999,
                    "minimum": 1000000000,
                    "example": 7568912340
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 5,
                    "example": "Arijit"
                }
            }
        },
        "models.BFFSigninUserResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "email": {
                    "type": "string",
                    "example": "arijit@gmail.com"
                },
                "username": {
                    "type": "string",
                    "example": "Arijit"
                }
            }
        },
        "models.BFFSinginUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "arijit@gmail.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "Ari123Jit@"
                }
            }
        },
        "models.ErrorAPIResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "errors": {
                    "$ref": "#/definitions/models.ErrorMessage"
                }
            }
        },
        "models.ErrorMessage": {
            "type": "object",
            "properties": {
                "errorMessage": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "models.SuccessAPIResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.BFFSigninUserResponse"
                },
                "message": {
                    "type": "string",
                    "example": "User logged in successfully"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
